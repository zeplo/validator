// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`validator.spec Error for invalid type by constructor Invalid type 1`] = `"Invalid type invalid"`;

exports[`validator.spec Error for invalid type by constructor in type prop validates Array type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <array> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by constructor in type prop validates Boolean type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <boolean> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by constructor in type prop validates Date type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <date> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by constructor in type prop validates Function type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <function> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by constructor in type prop validates Number type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <number> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by constructor in type prop validates Object type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <object> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by constructor in type prop validates String type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <string> but received value <number> 22",
  "severity": "error",
  "value": 22,
}
`;

exports[`validator.spec Error for invalid type by constructor validates Array type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <array> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by constructor validates Boolean type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <boolean> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by constructor validates Date type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <date> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by constructor validates Function type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <function> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by constructor validates Number type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <number> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by constructor validates Object type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <object> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by constructor validates String type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <string> but received value <number> 22",
  "severity": "error",
  "value": 22,
}
`;

exports[`validator.spec Error for invalid type by name validates Array type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <array> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by name validates Boolean type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <boolean> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by name validates Date type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <date> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by name validates Function type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <function> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by name validates Number type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <number> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by name validates Object type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <object> but received value <string> hello",
  "severity": "error",
  "value": "hello",
}
`;

exports[`validator.spec Error for invalid type by name validates String type 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid type for \`prop1\` expected type <string> but received value <number> 22",
  "severity": "error",
  "value": 22,
}
`;

exports[`validator.spec In-built validators validates oneOf 1`] = `
Object {
  "keyPath": "prop1",
  "message": "Invalid option selected for \`prop1\` must be one of A, B",
  "schema": Object {
    "oneOf": Array [
      "A",
      "B",
    ],
    "type": [Function],
  },
  "severity": "error",
  "value": "D",
}
`;

exports[`validator.spec In-built validators validates property exists on schema 1`] = `
Object {
  "key": "unknown",
  "message": "Unknown key at \`unknown\`",
  "severity": "warning",
  "value": "D",
}
`;

exports[`validator.spec In-built validators validates required fields 1`] = `
Object {
  "key": "prop1",
  "message": "Missing required key \`prop1\`",
  "severity": "error",
  "value": undefined,
}
`;

exports[`validator.spec Validates nested props Invalid nested array with schema field named type 1`] = `
Array [
  Object {
    "keyPath": "type.subprop1",
    "message": "Invalid type for \`type.subprop1\` expected type <string> but received value <number> 22",
    "severity": "error",
    "value": 22,
  },
  Object {
    "keyPath": "type.subprop2",
    "message": "Invalid type for \`type.subprop2\` expected type <number> but received value <string> Hello",
    "severity": "error",
    "value": "Hello",
  },
]
`;

exports[`validator.spec Validates nested props Invalid nested array with string and number types - long form 1`] = `
Array [
  Object {
    "keyPath": "prop1.0.subprop1",
    "message": "Invalid type for \`prop1.0.subprop1\` expected type <string> but received value <number> 22",
    "severity": "error",
    "value": 22,
  },
  Object {
    "keyPath": "prop1.0.subprop2",
    "message": "Invalid type for \`prop1.0.subprop2\` expected type <number> but received value <string> Hello",
    "severity": "error",
    "value": "Hello",
  },
]
`;

exports[`validator.spec Validates nested props Invalid nested array with string and number types - short form 1`] = `
Array [
  Object {
    "keyPath": "prop1.0.subprop1",
    "message": "Invalid type for \`prop1.0.subprop1\` expected type <string> but received value <number> 22",
    "severity": "error",
    "value": 22,
  },
  Object {
    "keyPath": "prop1.0.subprop2",
    "message": "Invalid type for \`prop1.0.subprop2\` expected type <number> but received value <string> Hello",
    "severity": "error",
    "value": "Hello",
  },
]
`;

exports[`validator.spec Validates nested props Invalid nested array with type - long form 1`] = `
Array [
  Object {
    "keyPath": "prop1.0.type",
    "message": "Invalid type for \`prop1.0.type\` expected type <string> but received value <number> 22",
    "severity": "error",
    "value": 22,
  },
  Object {
    "keyPath": "prop1.0.subprop2",
    "message": "Invalid type for \`prop1.0.subprop2\` expected type <number> but received value <string> Hello",
    "severity": "error",
    "value": "Hello",
  },
]
`;

exports[`validator.spec Validates nested props Invalid nested obj with deep field named type 1`] = `
Array [
  Object {
    "keyPath": "prop1.type",
    "message": "Invalid type for \`prop1.type\` expected type <string> but received value <number> 22",
    "severity": "error",
    "value": 22,
  },
]
`;

exports[`validator.spec Validates nested props Invalid nested object with string and number types 1`] = `
Array [
  Object {
    "keyPath": "prop1.subprop1",
    "message": "Invalid type for \`prop1.subprop1\` expected type <string> but received value <number> 22",
    "severity": "error",
    "value": 22,
  },
  Object {
    "keyPath": "prop1.subprop2",
    "message": "Invalid type for \`prop1.subprop2\` expected type <number> but received value <string> Hello",
    "severity": "error",
    "value": "Hello",
  },
]
`;
